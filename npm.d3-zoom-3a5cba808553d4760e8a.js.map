{"version":3,"sources":["webpack:///./node_modules/d3-zoom/src/transform.js"],"names":["Transform","k","x","y","this","prototype","constructor","scale","translate","apply","point","applyX","applyY","invert","location","invertX","invertY","rescaleX","copy","domain","range","map","rescaleY","toString"],"mappings":"qHAAO,SAAAA,UAAAC,EAAAC,EAAAC,GACPC,KAAAH,IACAG,KAAAF,IACAE,KAAAD,IAGAH,UAAAK,UAAA,CACAC,YAAAN,UACAO,MAAA,SAAAN,GACA,WAAAA,EAAAG,KAAA,IAAAJ,UAAAI,KAAAH,IAAAG,KAAAF,EAAAE,KAAAD,IAEAK,UAAA,SAAAN,EAAAC,GACA,WAAAD,EAAA,IAAAC,EAAAC,KAAA,IAAAJ,UAAAI,KAAAH,EAAAG,KAAAF,EAAAE,KAAAH,EAAAC,EAAAE,KAAAD,EAAAC,KAAAH,EAAAE,IAEAM,MAAA,SAAAC,GACA,OAAAA,EAAA,GAAAN,KAAAH,EAAAG,KAAAF,EAAAQ,EAAA,GAAAN,KAAAH,EAAAG,KAAAD,IAEAQ,OAAA,SAAAT,GACA,OAAAA,EAAAE,KAAAH,EAAAG,KAAAF,GAEAU,OAAA,SAAAT,GACA,OAAAA,EAAAC,KAAAH,EAAAG,KAAAD,GAEAU,OAAA,SAAAC,GACA,QAAAA,EAAA,GAAAV,KAAAF,GAAAE,KAAAH,GAAAa,EAAA,GAAAV,KAAAD,GAAAC,KAAAH,IAEAc,QAAA,SAAAb,GACA,OAAAA,EAAAE,KAAAF,GAAAE,KAAAH,GAEAe,QAAA,SAAAb,GACA,OAAAA,EAAAC,KAAAD,GAAAC,KAAAH,GAEAgB,SAAA,SAAAf,GACA,OAAAA,EAAAgB,OAAAC,OAAAjB,EAAAkB,QAAAC,IAAAjB,KAAAW,QAAAX,MAAAiB,IAAAnB,EAAAW,OAAAX,KAEAoB,SAAA,SAAAnB,GACA,OAAAA,EAAAe,OAAAC,OAAAhB,EAAAiB,QAAAC,IAAAjB,KAAAY,QAAAZ,MAAAiB,IAAAlB,EAAAU,OAAAV,KAEAoB,SAAA,WACA,mBAAAnB,KAAAF,EAAA,IAAAE,KAAAD,EAAA,WAAAC,KAAAH,EAAA,MAIO,IAAAD,UAAA,OAEEA,UAAAK","file":"npm.d3-zoom-3a5cba808553d4760e8a.js","sourcesContent":["export function Transform(k, x, y) {\n  this.k = k;\n  this.x = x;\n  this.y = y;\n}\n\nTransform.prototype = {\n  constructor: Transform,\n  scale: function(k) {\n    return k === 1 ? this : new Transform(this.k * k, this.x, this.y);\n  },\n  translate: function(x, y) {\n    return x === 0 & y === 0 ? this : new Transform(this.k, this.x + this.k * x, this.y + this.k * y);\n  },\n  apply: function(point) {\n    return [point[0] * this.k + this.x, point[1] * this.k + this.y];\n  },\n  applyX: function(x) {\n    return x * this.k + this.x;\n  },\n  applyY: function(y) {\n    return y * this.k + this.y;\n  },\n  invert: function(location) {\n    return [(location[0] - this.x) / this.k, (location[1] - this.y) / this.k];\n  },\n  invertX: function(x) {\n    return (x - this.x) / this.k;\n  },\n  invertY: function(y) {\n    return (y - this.y) / this.k;\n  },\n  rescaleX: function(x) {\n    return x.copy().domain(x.range().map(this.invertX, this).map(x.invert, x));\n  },\n  rescaleY: function(y) {\n    return y.copy().domain(y.range().map(this.invertY, this).map(y.invert, y));\n  },\n  toString: function() {\n    return \"translate(\" + this.x + \",\" + this.y + \") scale(\" + this.k + \")\";\n  }\n};\n\nexport var identity = new Transform(1, 0, 0);\n\ntransform.prototype = Transform.prototype;\n\nexport default function transform(node) {\n  return node.__zoom || identity;\n}\n"],"sourceRoot":""}