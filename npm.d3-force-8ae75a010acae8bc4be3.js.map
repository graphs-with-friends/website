{"version":3,"sources":["webpack:///./node_modules/d3-force/src/center.js","webpack:///./node_modules/d3-force/src/constant.js","webpack:///./node_modules/d3-force/src/jiggle.js","webpack:///./node_modules/d3-force/src/collide.js","webpack:///./node_modules/d3-force/src/link.js","webpack:///./node_modules/d3-force/src/simulation.js","webpack:///./node_modules/d3-force/src/manyBody.js","webpack:///./node_modules/d3-force/src/index.js"],"names":["center","x","y","nodes","force","i","node","n","length","sx","sy","initialize","_","arguments","constant","jiggle","Math","random","index","d","find","nodeById","nodeId","get","Error","src_link","links","strengths","distances","count","bias","id","strength","defaultStrength","link","min","source","target","distance","iterations","alpha","k","l","b","vx","vy","sqrt","m","Object","d3_collection_src","Array","initializeStrength","initializeDistance","simulation_x","simulation_y","initialRadius","initialAngle","PI","src_simulation","simulation","alphaMin","alphaDecay","pow","alphaTarget","velocityDecay","forces","stepper","d3_timer_src","step","event","d3_dispatch_src","tick","call","stop","undefined","each","fx","fy","initializeNodes","isNaN","radius","angle","cos","sin","initializeForce","restart","name","remove","set","dx","dy","d2","closest","Infinity","on","manyBody","distanceMin2","distanceMax2","theta2","tree","src","visitAfter","accumulate","visit","apply","quad","q","c","weight","abs","value","data","next","x1","x2","w","distanceMin","distanceMax","theta","__webpack_require__","__webpack_exports__"],"mappings":"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","file":"npm.d3-force-8ae75a010acae8bc4be3.js","sourcesContent":["export default function(x, y) {\n  var nodes;\n\n  if (x == null) x = 0;\n  if (y == null) y = 0;\n\n  function force() {\n    var i,\n        n = nodes.length,\n        node,\n        sx = 0,\n        sy = 0;\n\n    for (i = 0; i < n; ++i) {\n      node = nodes[i], sx += node.x, sy += node.y;\n    }\n\n    for (sx = sx / n - x, sy = sy / n - y, i = 0; i < n; ++i) {\n      node = nodes[i], node.x -= sx, node.y -= sy;\n    }\n  }\n\n  force.initialize = function(_) {\n    nodes = _;\n  };\n\n  force.x = function(_) {\n    return arguments.length ? (x = +_, force) : x;\n  };\n\n  force.y = function(_) {\n    return arguments.length ? (y = +_, force) : y;\n  };\n\n  return force;\n}\n","export default function(x) {\n  return function() {\n    return x;\n  };\n}\n","export default function() {\n  return (Math.random() - 0.5) * 1e-6;\n}\n","import constant from \"./constant\";\nimport jiggle from \"./jiggle\";\nimport {quadtree} from \"d3-quadtree\";\n\nfunction x(d) {\n  return d.x + d.vx;\n}\n\nfunction y(d) {\n  return d.y + d.vy;\n}\n\nexport default function(radius) {\n  var nodes,\n      radii,\n      strength = 1,\n      iterations = 1;\n\n  if (typeof radius !== \"function\") radius = constant(radius == null ? 1 : +radius);\n\n  function force() {\n    var i, n = nodes.length,\n        tree,\n        node,\n        xi,\n        yi,\n        ri,\n        ri2;\n\n    for (var k = 0; k < iterations; ++k) {\n      tree = quadtree(nodes, x, y).visitAfter(prepare);\n      for (i = 0; i < n; ++i) {\n        node = nodes[i];\n        ri = radii[node.index], ri2 = ri * ri;\n        xi = node.x + node.vx;\n        yi = node.y + node.vy;\n        tree.visit(apply);\n      }\n    }\n\n    function apply(quad, x0, y0, x1, y1) {\n      var data = quad.data, rj = quad.r, r = ri + rj;\n      if (data) {\n        if (data.index > node.index) {\n          var x = xi - data.x - data.vx,\n              y = yi - data.y - data.vy,\n              l = x * x + y * y;\n          if (l < r * r) {\n            if (x === 0) x = jiggle(), l += x * x;\n            if (y === 0) y = jiggle(), l += y * y;\n            l = (r - (l = Math.sqrt(l))) / l * strength;\n            node.vx += (x *= l) * (r = (rj *= rj) / (ri2 + rj));\n            node.vy += (y *= l) * r;\n            data.vx -= x * (r = 1 - r);\n            data.vy -= y * r;\n          }\n        }\n        return;\n      }\n      return x0 > xi + r || x1 < xi - r || y0 > yi + r || y1 < yi - r;\n    }\n  }\n\n  function prepare(quad) {\n    if (quad.data) return quad.r = radii[quad.data.index];\n    for (var i = quad.r = 0; i < 4; ++i) {\n      if (quad[i] && quad[i].r > quad.r) {\n        quad.r = quad[i].r;\n      }\n    }\n  }\n\n  function initialize() {\n    if (!nodes) return;\n    var i, n = nodes.length, node;\n    radii = new Array(n);\n    for (i = 0; i < n; ++i) node = nodes[i], radii[node.index] = +radius(node, i, nodes);\n  }\n\n  force.initialize = function(_) {\n    nodes = _;\n    initialize();\n  };\n\n  force.iterations = function(_) {\n    return arguments.length ? (iterations = +_, force) : iterations;\n  };\n\n  force.strength = function(_) {\n    return arguments.length ? (strength = +_, force) : strength;\n  };\n\n  force.radius = function(_) {\n    return arguments.length ? (radius = typeof _ === \"function\" ? _ : constant(+_), initialize(), force) : radius;\n  };\n\n  return force;\n}\n","import constant from \"./constant\";\nimport jiggle from \"./jiggle\";\nimport {map} from \"d3-collection\";\n\nfunction index(d) {\n  return d.index;\n}\n\nfunction find(nodeById, nodeId) {\n  var node = nodeById.get(nodeId);\n  if (!node) throw new Error(\"missing: \" + nodeId);\n  return node;\n}\n\nexport default function(links) {\n  var id = index,\n      strength = defaultStrength,\n      strengths,\n      distance = constant(30),\n      distances,\n      nodes,\n      count,\n      bias,\n      iterations = 1;\n\n  if (links == null) links = [];\n\n  function defaultStrength(link) {\n    return 1 / Math.min(count[link.source.index], count[link.target.index]);\n  }\n\n  function force(alpha) {\n    for (var k = 0, n = links.length; k < iterations; ++k) {\n      for (var i = 0, link, source, target, x, y, l, b; i < n; ++i) {\n        link = links[i], source = link.source, target = link.target;\n        x = target.x + target.vx - source.x - source.vx || jiggle();\n        y = target.y + target.vy - source.y - source.vy || jiggle();\n        l = Math.sqrt(x * x + y * y);\n        l = (l - distances[i]) / l * alpha * strengths[i];\n        x *= l, y *= l;\n        target.vx -= x * (b = bias[i]);\n        target.vy -= y * b;\n        source.vx += x * (b = 1 - b);\n        source.vy += y * b;\n      }\n    }\n  }\n\n  function initialize() {\n    if (!nodes) return;\n\n    var i,\n        n = nodes.length,\n        m = links.length,\n        nodeById = map(nodes, id),\n        link;\n\n    for (i = 0, count = new Array(n); i < m; ++i) {\n      link = links[i], link.index = i;\n      if (typeof link.source !== \"object\") link.source = find(nodeById, link.source);\n      if (typeof link.target !== \"object\") link.target = find(nodeById, link.target);\n      count[link.source.index] = (count[link.source.index] || 0) + 1;\n      count[link.target.index] = (count[link.target.index] || 0) + 1;\n    }\n\n    for (i = 0, bias = new Array(m); i < m; ++i) {\n      link = links[i], bias[i] = count[link.source.index] / (count[link.source.index] + count[link.target.index]);\n    }\n\n    strengths = new Array(m), initializeStrength();\n    distances = new Array(m), initializeDistance();\n  }\n\n  function initializeStrength() {\n    if (!nodes) return;\n\n    for (var i = 0, n = links.length; i < n; ++i) {\n      strengths[i] = +strength(links[i], i, links);\n    }\n  }\n\n  function initializeDistance() {\n    if (!nodes) return;\n\n    for (var i = 0, n = links.length; i < n; ++i) {\n      distances[i] = +distance(links[i], i, links);\n    }\n  }\n\n  force.initialize = function(_) {\n    nodes = _;\n    initialize();\n  };\n\n  force.links = function(_) {\n    return arguments.length ? (links = _, initialize(), force) : links;\n  };\n\n  force.id = function(_) {\n    return arguments.length ? (id = _, force) : id;\n  };\n\n  force.iterations = function(_) {\n    return arguments.length ? (iterations = +_, force) : iterations;\n  };\n\n  force.strength = function(_) {\n    return arguments.length ? (strength = typeof _ === \"function\" ? _ : constant(+_), initializeStrength(), force) : strength;\n  };\n\n  force.distance = function(_) {\n    return arguments.length ? (distance = typeof _ === \"function\" ? _ : constant(+_), initializeDistance(), force) : distance;\n  };\n\n  return force;\n}\n","import {dispatch} from \"d3-dispatch\";\nimport {map} from \"d3-collection\";\nimport {timer} from \"d3-timer\";\n\nexport function x(d) {\n  return d.x;\n}\n\nexport function y(d) {\n  return d.y;\n}\n\nvar initialRadius = 10,\n    initialAngle = Math.PI * (3 - Math.sqrt(5));\n\nexport default function(nodes) {\n  var simulation,\n      alpha = 1,\n      alphaMin = 0.001,\n      alphaDecay = 1 - Math.pow(alphaMin, 1 / 300),\n      alphaTarget = 0,\n      velocityDecay = 0.6,\n      forces = map(),\n      stepper = timer(step),\n      event = dispatch(\"tick\", \"end\");\n\n  if (nodes == null) nodes = [];\n\n  function step() {\n    tick();\n    event.call(\"tick\", simulation);\n    if (alpha < alphaMin) {\n      stepper.stop();\n      event.call(\"end\", simulation);\n    }\n  }\n\n  function tick(iterations) {\n    var i, n = nodes.length, node;\n\n    if (iterations === undefined) iterations = 1;\n\n    for (var k = 0; k < iterations; ++k) {\n      alpha += (alphaTarget - alpha) * alphaDecay;\n\n      forces.each(function (force) {\n        force(alpha);\n      });\n\n      for (i = 0; i < n; ++i) {\n        node = nodes[i];\n        if (node.fx == null) node.x += node.vx *= velocityDecay;\n        else node.x = node.fx, node.vx = 0;\n        if (node.fy == null) node.y += node.vy *= velocityDecay;\n        else node.y = node.fy, node.vy = 0;\n      }\n    }\n\n    return simulation;\n  }\n\n  function initializeNodes() {\n    for (var i = 0, n = nodes.length, node; i < n; ++i) {\n      node = nodes[i], node.index = i;\n      if (node.fx != null) node.x = node.fx;\n      if (node.fy != null) node.y = node.fy;\n      if (isNaN(node.x) || isNaN(node.y)) {\n        var radius = initialRadius * Math.sqrt(i), angle = i * initialAngle;\n        node.x = radius * Math.cos(angle);\n        node.y = radius * Math.sin(angle);\n      }\n      if (isNaN(node.vx) || isNaN(node.vy)) {\n        node.vx = node.vy = 0;\n      }\n    }\n  }\n\n  function initializeForce(force) {\n    if (force.initialize) force.initialize(nodes);\n    return force;\n  }\n\n  initializeNodes();\n\n  return simulation = {\n    tick: tick,\n\n    restart: function() {\n      return stepper.restart(step), simulation;\n    },\n\n    stop: function() {\n      return stepper.stop(), simulation;\n    },\n\n    nodes: function(_) {\n      return arguments.length ? (nodes = _, initializeNodes(), forces.each(initializeForce), simulation) : nodes;\n    },\n\n    alpha: function(_) {\n      return arguments.length ? (alpha = +_, simulation) : alpha;\n    },\n\n    alphaMin: function(_) {\n      return arguments.length ? (alphaMin = +_, simulation) : alphaMin;\n    },\n\n    alphaDecay: function(_) {\n      return arguments.length ? (alphaDecay = +_, simulation) : +alphaDecay;\n    },\n\n    alphaTarget: function(_) {\n      return arguments.length ? (alphaTarget = +_, simulation) : alphaTarget;\n    },\n\n    velocityDecay: function(_) {\n      return arguments.length ? (velocityDecay = 1 - _, simulation) : 1 - velocityDecay;\n    },\n\n    force: function(name, _) {\n      return arguments.length > 1 ? ((_ == null ? forces.remove(name) : forces.set(name, initializeForce(_))), simulation) : forces.get(name);\n    },\n\n    find: function(x, y, radius) {\n      var i = 0,\n          n = nodes.length,\n          dx,\n          dy,\n          d2,\n          node,\n          closest;\n\n      if (radius == null) radius = Infinity;\n      else radius *= radius;\n\n      for (i = 0; i < n; ++i) {\n        node = nodes[i];\n        dx = x - node.x;\n        dy = y - node.y;\n        d2 = dx * dx + dy * dy;\n        if (d2 < radius) closest = node, radius = d2;\n      }\n\n      return closest;\n    },\n\n    on: function(name, _) {\n      return arguments.length > 1 ? (event.on(name, _), simulation) : event.on(name);\n    }\n  };\n}\n","import constant from \"./constant\";\nimport jiggle from \"./jiggle\";\nimport {quadtree} from \"d3-quadtree\";\nimport {x, y} from \"./simulation\";\n\nexport default function() {\n  var nodes,\n      node,\n      alpha,\n      strength = constant(-30),\n      strengths,\n      distanceMin2 = 1,\n      distanceMax2 = Infinity,\n      theta2 = 0.81;\n\n  function force(_) {\n    var i, n = nodes.length, tree = quadtree(nodes, x, y).visitAfter(accumulate);\n    for (alpha = _, i = 0; i < n; ++i) node = nodes[i], tree.visit(apply);\n  }\n\n  function initialize() {\n    if (!nodes) return;\n    var i, n = nodes.length, node;\n    strengths = new Array(n);\n    for (i = 0; i < n; ++i) node = nodes[i], strengths[node.index] = +strength(node, i, nodes);\n  }\n\n  function accumulate(quad) {\n    var strength = 0, q, c, weight = 0, x, y, i;\n\n    // For internal nodes, accumulate forces from child quadrants.\n    if (quad.length) {\n      for (x = y = i = 0; i < 4; ++i) {\n        if ((q = quad[i]) && (c = Math.abs(q.value))) {\n          strength += q.value, weight += c, x += c * q.x, y += c * q.y;\n        }\n      }\n      quad.x = x / weight;\n      quad.y = y / weight;\n    }\n\n    // For leaf nodes, accumulate forces from coincident quadrants.\n    else {\n      q = quad;\n      q.x = q.data.x;\n      q.y = q.data.y;\n      do strength += strengths[q.data.index];\n      while (q = q.next);\n    }\n\n    quad.value = strength;\n  }\n\n  function apply(quad, x1, _, x2) {\n    if (!quad.value) return true;\n\n    var x = quad.x - node.x,\n        y = quad.y - node.y,\n        w = x2 - x1,\n        l = x * x + y * y;\n\n    // Apply the Barnes-Hut approximation if possible.\n    // Limit forces for very close nodes; randomize direction if coincident.\n    if (w * w / theta2 < l) {\n      if (l < distanceMax2) {\n        if (x === 0) x = jiggle(), l += x * x;\n        if (y === 0) y = jiggle(), l += y * y;\n        if (l < distanceMin2) l = Math.sqrt(distanceMin2 * l);\n        node.vx += x * quad.value * alpha / l;\n        node.vy += y * quad.value * alpha / l;\n      }\n      return true;\n    }\n\n    // Otherwise, process points directly.\n    else if (quad.length || l >= distanceMax2) return;\n\n    // Limit forces for very close nodes; randomize direction if coincident.\n    if (quad.data !== node || quad.next) {\n      if (x === 0) x = jiggle(), l += x * x;\n      if (y === 0) y = jiggle(), l += y * y;\n      if (l < distanceMin2) l = Math.sqrt(distanceMin2 * l);\n    }\n\n    do if (quad.data !== node) {\n      w = strengths[quad.data.index] * alpha / l;\n      node.vx += x * w;\n      node.vy += y * w;\n    } while (quad = quad.next);\n  }\n\n  force.initialize = function(_) {\n    nodes = _;\n    initialize();\n  };\n\n  force.strength = function(_) {\n    return arguments.length ? (strength = typeof _ === \"function\" ? _ : constant(+_), initialize(), force) : strength;\n  };\n\n  force.distanceMin = function(_) {\n    return arguments.length ? (distanceMin2 = _ * _, force) : Math.sqrt(distanceMin2);\n  };\n\n  force.distanceMax = function(_) {\n    return arguments.length ? (distanceMax2 = _ * _, force) : Math.sqrt(distanceMax2);\n  };\n\n  force.theta = function(_) {\n    return arguments.length ? (theta2 = _ * _, force) : Math.sqrt(theta2);\n  };\n\n  return force;\n}\n","export {default as forceCenter} from \"./center\";\nexport {default as forceCollide} from \"./collide\";\nexport {default as forceLink} from \"./link\";\nexport {default as forceManyBody} from \"./manyBody\";\nexport {default as forceRadial} from \"./radial\";\nexport {default as forceSimulation} from \"./simulation\";\nexport {default as forceX} from \"./x\";\nexport {default as forceY} from \"./y\";\n"],"sourceRoot":""}