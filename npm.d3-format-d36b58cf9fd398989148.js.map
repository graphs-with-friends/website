{"version":3,"sources":["webpack:///./node_modules/d3-format/src/formatDecimal.js","webpack:///./node_modules/d3-format/src/exponent.js","webpack:///./node_modules/d3-format/src/formatSpecifier.js","webpack:///./node_modules/d3-format/src/formatTrim.js","webpack:///./node_modules/d3-format/src/formatPrefixAuto.js","webpack:///./node_modules/d3-format/src/defaultLocale.js","webpack:///./node_modules/d3-format/src/formatRounded.js","webpack:///./node_modules/d3-format/src/formatTypes.js","webpack:///./node_modules/d3-format/src/identity.js","webpack:///./node_modules/d3-format/src/locale.js","webpack:///./node_modules/d3-format/src/formatGroup.js","webpack:///./node_modules/d3-format/src/formatNumerals.js","webpack:///./node_modules/d3-format/src/precisionFixed.js","webpack:///./node_modules/d3-format/src/precisionPrefix.js","webpack:///./node_modules/d3-format/src/precisionRound.js","webpack:///./node_modules/d3-format/src/index.js"],"names":["formatDecimal","x","p","i","toExponential","indexOf","coefficient","slice","length","src_exponent","Math","abs","NaN","re","formatSpecifier","specifier","FormatSpecifier","match","exec","Error","this","fill","align","sign","symbol","zero","width","comma","precision","trim","type","prototype","toString","max","prefixExponent","defaultLocale_locale","defaultLocale_format","defaultLocale_formatPrefix","formatTrim","s","out","i1","n","i0","formatRounded","d","exponent","Array","join","formatTypes","%","toFixed","b","round","c","e","f","g","toPrecision","o","r","min","floor","X","toUpperCase","identity","prefixes","src_locale","locale","grouping","thousands","group","value","t","j","push","substring","reverse","currency","decimal","numerals","replace","formatNumerals","percent","newFormat","prefix","test","toLowerCase","suffix","formatType","maybeSuffix","format","valuePrefix","valueSuffix","valueNegative","charCodeAt","Infinity","padding","formatPrefix","k","pow","defaultLocale","definition","precisionFixed","step","precisionPrefix","precisionRound","__webpack_require__","__webpack_exports__"],"mappings":"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","file":"npm.d3-format-d36b58cf9fd398989148.js","sourcesContent":["// Computes the decimal coefficient and exponent of the specified number x with\n// significant digits p, where x is positive and p is in [1, 21] or undefined.\n// For example, formatDecimal(1.23) returns [\"123\", 0].\nexport default function(x, p) {\n  if ((i = (x = p ? x.toExponential(p - 1) : x.toExponential()).indexOf(\"e\")) < 0) return null; // NaN, Â±Infinity\n  var i, coefficient = x.slice(0, i);\n\n  // The string returned by toExponential either has the form \\d\\.\\d+e[-+]\\d+\n  // (e.g., 1.2e+3) or the form \\de[-+]\\d+ (e.g., 1e+3).\n  return [\n    coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient,\n    +x.slice(i + 1)\n  ];\n}\n","import formatDecimal from \"./formatDecimal\";\n\nexport default function(x) {\n  return x = formatDecimal(Math.abs(x)), x ? x[1] : NaN;\n}\n","// [[fill]align][sign][symbol][0][width][,][.precision][~][type]\nvar re = /^(?:(.)?([<>=^]))?([+\\-( ])?([$#])?(0)?(\\d+)?(,)?(\\.\\d+)?(~)?([a-z%])?$/i;\n\nexport default function formatSpecifier(specifier) {\n  return new FormatSpecifier(specifier);\n}\n\nformatSpecifier.prototype = FormatSpecifier.prototype; // instanceof\n\nfunction FormatSpecifier(specifier) {\n  if (!(match = re.exec(specifier))) throw new Error(\"invalid format: \" + specifier);\n  var match;\n  this.fill = match[1] || \" \";\n  this.align = match[2] || \">\";\n  this.sign = match[3] || \"-\";\n  this.symbol = match[4] || \"\";\n  this.zero = !!match[5];\n  this.width = match[6] && +match[6];\n  this.comma = !!match[7];\n  this.precision = match[8] && +match[8].slice(1);\n  this.trim = !!match[9];\n  this.type = match[10] || \"\";\n}\n\nFormatSpecifier.prototype.toString = function() {\n  return this.fill\n      + this.align\n      + this.sign\n      + this.symbol\n      + (this.zero ? \"0\" : \"\")\n      + (this.width == null ? \"\" : Math.max(1, this.width | 0))\n      + (this.comma ? \",\" : \"\")\n      + (this.precision == null ? \"\" : \".\" + Math.max(0, this.precision | 0))\n      + (this.trim ? \"~\" : \"\")\n      + this.type;\n};\n","// Trims insignificant zeros, e.g., replaces 1.2000k with 1.2k.\nexport default function(s) {\n  out: for (var n = s.length, i = 1, i0 = -1, i1; i < n; ++i) {\n    switch (s[i]) {\n      case \".\": i0 = i1 = i; break;\n      case \"0\": if (i0 === 0) i0 = i; i1 = i; break;\n      default: if (i0 > 0) { if (!+s[i]) break out; i0 = 0; } break;\n    }\n  }\n  return i0 > 0 ? s.slice(0, i0) + s.slice(i1 + 1) : s;\n}\n","import formatDecimal from \"./formatDecimal\";\n\nexport var prefixExponent;\n\nexport default function(x, p) {\n  var d = formatDecimal(x, p);\n  if (!d) return x + \"\";\n  var coefficient = d[0],\n      exponent = d[1],\n      i = exponent - (prefixExponent = Math.max(-8, Math.min(8, Math.floor(exponent / 3))) * 3) + 1,\n      n = coefficient.length;\n  return i === n ? coefficient\n      : i > n ? coefficient + new Array(i - n + 1).join(\"0\")\n      : i > 0 ? coefficient.slice(0, i) + \".\" + coefficient.slice(i)\n      : \"0.\" + new Array(1 - i).join(\"0\") + formatDecimal(x, Math.max(0, p + i - 1))[0]; // less than 1y!\n}\n","import formatLocale from \"./locale\";\n\nvar locale;\nexport var format;\nexport var formatPrefix;\n\ndefaultLocale({\n  decimal: \".\",\n  thousands: \",\",\n  grouping: [3],\n  currency: [\"$\", \"\"]\n});\n\nexport default function defaultLocale(definition) {\n  locale = formatLocale(definition);\n  format = locale.format;\n  formatPrefix = locale.formatPrefix;\n  return locale;\n}\n","import formatDecimal from \"./formatDecimal\";\n\nexport default function(x, p) {\n  var d = formatDecimal(x, p);\n  if (!d) return x + \"\";\n  var coefficient = d[0],\n      exponent = d[1];\n  return exponent < 0 ? \"0.\" + new Array(-exponent).join(\"0\") + coefficient\n      : coefficient.length > exponent + 1 ? coefficient.slice(0, exponent + 1) + \".\" + coefficient.slice(exponent + 1)\n      : coefficient + new Array(exponent - coefficient.length + 2).join(\"0\");\n}\n","import formatPrefixAuto from \"./formatPrefixAuto\";\nimport formatRounded from \"./formatRounded\";\n\nexport default {\n  \"%\": function(x, p) { return (x * 100).toFixed(p); },\n  \"b\": function(x) { return Math.round(x).toString(2); },\n  \"c\": function(x) { return x + \"\"; },\n  \"d\": function(x) { return Math.round(x).toString(10); },\n  \"e\": function(x, p) { return x.toExponential(p); },\n  \"f\": function(x, p) { return x.toFixed(p); },\n  \"g\": function(x, p) { return x.toPrecision(p); },\n  \"o\": function(x) { return Math.round(x).toString(8); },\n  \"p\": function(x, p) { return formatRounded(x * 100, p); },\n  \"r\": formatRounded,\n  \"s\": formatPrefixAuto,\n  \"X\": function(x) { return Math.round(x).toString(16).toUpperCase(); },\n  \"x\": function(x) { return Math.round(x).toString(16); }\n};\n","export default function(x) {\n  return x;\n}\n","import exponent from \"./exponent\";\nimport formatGroup from \"./formatGroup\";\nimport formatNumerals from \"./formatNumerals\";\nimport formatSpecifier from \"./formatSpecifier\";\nimport formatTrim from \"./formatTrim\";\nimport formatTypes from \"./formatTypes\";\nimport {prefixExponent} from \"./formatPrefixAuto\";\nimport identity from \"./identity\";\n\nvar prefixes = [\"y\",\"z\",\"a\",\"f\",\"p\",\"n\",\"Âµ\",\"m\",\"\",\"k\",\"M\",\"G\",\"T\",\"P\",\"E\",\"Z\",\"Y\"];\n\nexport default function(locale) {\n  var group = locale.grouping && locale.thousands ? formatGroup(locale.grouping, locale.thousands) : identity,\n      currency = locale.currency,\n      decimal = locale.decimal,\n      numerals = locale.numerals ? formatNumerals(locale.numerals) : identity,\n      percent = locale.percent || \"%\";\n\n  function newFormat(specifier) {\n    specifier = formatSpecifier(specifier);\n\n    var fill = specifier.fill,\n        align = specifier.align,\n        sign = specifier.sign,\n        symbol = specifier.symbol,\n        zero = specifier.zero,\n        width = specifier.width,\n        comma = specifier.comma,\n        precision = specifier.precision,\n        trim = specifier.trim,\n        type = specifier.type;\n\n    // The \"n\" type is an alias for \",g\".\n    if (type === \"n\") comma = true, type = \"g\";\n\n    // The \"\" type, and any invalid type, is an alias for \".12~g\".\n    else if (!formatTypes[type]) precision == null && (precision = 12), trim = true, type = \"g\";\n\n    // If zero fill is specified, padding goes after sign and before digits.\n    if (zero || (fill === \"0\" && align === \"=\")) zero = true, fill = \"0\", align = \"=\";\n\n    // Compute the prefix and suffix.\n    // For SI-prefix, the suffix is lazily computed.\n    var prefix = symbol === \"$\" ? currency[0] : symbol === \"#\" && /[boxX]/.test(type) ? \"0\" + type.toLowerCase() : \"\",\n        suffix = symbol === \"$\" ? currency[1] : /[%p]/.test(type) ? percent : \"\";\n\n    // What format function should we use?\n    // Is this an integer type?\n    // Can this type generate exponential notation?\n    var formatType = formatTypes[type],\n        maybeSuffix = /[defgprs%]/.test(type);\n\n    // Set the default precision if not specified,\n    // or clamp the specified precision to the supported range.\n    // For significant precision, it must be in [1, 21].\n    // For fixed precision, it must be in [0, 20].\n    precision = precision == null ? 6\n        : /[gprs]/.test(type) ? Math.max(1, Math.min(21, precision))\n        : Math.max(0, Math.min(20, precision));\n\n    function format(value) {\n      var valuePrefix = prefix,\n          valueSuffix = suffix,\n          i, n, c;\n\n      if (type === \"c\") {\n        valueSuffix = formatType(value) + valueSuffix;\n        value = \"\";\n      } else {\n        value = +value;\n\n        // Perform the initial formatting.\n        var valueNegative = value < 0;\n        value = formatType(Math.abs(value), precision);\n\n        // Trim insignificant zeros.\n        if (trim) value = formatTrim(value);\n\n        // If a negative value rounds to zero during formatting, treat as positive.\n        if (valueNegative && +value === 0) valueNegative = false;\n\n        // Compute the prefix and suffix.\n        valuePrefix = (valueNegative ? (sign === \"(\" ? sign : \"-\") : sign === \"-\" || sign === \"(\" ? \"\" : sign) + valuePrefix;\n        valueSuffix = (type === \"s\" ? prefixes[8 + prefixExponent / 3] : \"\") + valueSuffix + (valueNegative && sign === \"(\" ? \")\" : \"\");\n\n        // Break the formatted value into the integer âvalueâ part that can be\n        // grouped, and fractional or exponential âsuffixâ part that is not.\n        if (maybeSuffix) {\n          i = -1, n = value.length;\n          while (++i < n) {\n            if (c = value.charCodeAt(i), 48 > c || c > 57) {\n              valueSuffix = (c === 46 ? decimal + value.slice(i + 1) : value.slice(i)) + valueSuffix;\n              value = value.slice(0, i);\n              break;\n            }\n          }\n        }\n      }\n\n      // If the fill character is not \"0\", grouping is applied before padding.\n      if (comma && !zero) value = group(value, Infinity);\n\n      // Compute the padding.\n      var length = valuePrefix.length + value.length + valueSuffix.length,\n          padding = length < width ? new Array(width - length + 1).join(fill) : \"\";\n\n      // If the fill character is \"0\", grouping is applied after padding.\n      if (comma && zero) value = group(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = \"\";\n\n      // Reconstruct the final output based on the desired alignment.\n      switch (align) {\n        case \"<\": value = valuePrefix + value + valueSuffix + padding; break;\n        case \"=\": value = valuePrefix + padding + value + valueSuffix; break;\n        case \"^\": value = padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length); break;\n        default: value = padding + valuePrefix + value + valueSuffix; break;\n      }\n\n      return numerals(value);\n    }\n\n    format.toString = function() {\n      return specifier + \"\";\n    };\n\n    return format;\n  }\n\n  function formatPrefix(specifier, value) {\n    var f = newFormat((specifier = formatSpecifier(specifier), specifier.type = \"f\", specifier)),\n        e = Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3,\n        k = Math.pow(10, -e),\n        prefix = prefixes[8 + e / 3];\n    return function(value) {\n      return f(k * value) + prefix;\n    };\n  }\n\n  return {\n    format: newFormat,\n    formatPrefix: formatPrefix\n  };\n}\n","export default function(grouping, thousands) {\n  return function(value, width) {\n    var i = value.length,\n        t = [],\n        j = 0,\n        g = grouping[0],\n        length = 0;\n\n    while (i > 0 && g > 0) {\n      if (length + g + 1 > width) g = Math.max(1, width - length);\n      t.push(value.substring(i -= g, i + g));\n      if ((length += g + 1) > width) break;\n      g = grouping[j = (j + 1) % grouping.length];\n    }\n\n    return t.reverse().join(thousands);\n  };\n}\n","export default function(numerals) {\n  return function(value) {\n    return value.replace(/[0-9]/g, function(i) {\n      return numerals[+i];\n    });\n  };\n}\n","import exponent from \"./exponent\";\n\nexport default function(step) {\n  return Math.max(0, -exponent(Math.abs(step)));\n}\n","import exponent from \"./exponent\";\n\nexport default function(step, value) {\n  return Math.max(0, Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3 - exponent(Math.abs(step)));\n}\n","import exponent from \"./exponent\";\n\nexport default function(step, max) {\n  step = Math.abs(step), max = Math.abs(max) - step;\n  return Math.max(0, exponent(max) - exponent(step)) + 1;\n}\n","export {default as formatDefaultLocale, format, formatPrefix} from \"./defaultLocale\";\nexport {default as formatLocale} from \"./locale\";\nexport {default as formatSpecifier} from \"./formatSpecifier\";\nexport {default as precisionFixed} from \"./precisionFixed\";\nexport {default as precisionPrefix} from \"./precisionPrefix\";\nexport {default as precisionRound} from \"./precisionRound\";\n"],"sourceRoot":""}