{"version":3,"sources":["webpack:///./node_modules/d3-fetch/src/buffer.js","webpack:///./node_modules/d3-fetch/src/text.js","webpack:///./node_modules/d3-fetch/src/dsv.js","webpack:///./node_modules/d3-fetch/src/xml.js"],"names":["responseText","response","ok","Error","status","statusText","text","src_text","input","init","fetch","then","dsvParse","parse","row","arguments","length","undefined","src","parser","type","DOMParser","parseFromString"],"mappings":"0FAKe,YCLf,SAAAA,aAAAC,GACA,IAAAA,EAAAC,GAAA,UAAAC,MAAAF,EAAAG,OAAA,IAAAH,EAAAI,YACA,OAAAJ,EAAAK,OAGe,IAAAC,EAAA,SAAAC,EAAAC,GACf,OAAAC,MAAAF,EAAAC,GAAAE,KAAAX,eCHA,SAAAY,SAAAC,GACA,gBAAAL,EAAAC,EAAAK,GAEA,OADA,IAAAC,UAAAC,QAAA,mBAAAP,IAAAK,EAAAL,SAAAQ,GACWV,EAAIC,EAAAC,GAAAE,KAAA,SAAAV,GACf,OAAAY,EAAAZ,EAAAa,MAaOF,SAAmBM,EAAA,GACnBN,SAAmBM,EAAA,GCnB1B,SAAAC,OAAAC,GACA,gBAAAZ,EAAAC,GACA,OAAWF,EAAIC,EAAAC,GAAAE,KAAA,SAAAL,GACf,WAAAe,WAAAC,gBAAAhB,EAAAc,MAKeD,OAAA,mBAERA,OAAA,aAEAA,OAAA","file":"npm.d3-fetch-9c45b56875b2acccbcf0.js","sourcesContent":["function responseArrayBuffer(response) {\n  if (!response.ok) throw new Error(response.status + \" \" + response.statusText);\n  return response.arrayBuffer();\n}\n\nexport default function(input, init) {\n  return fetch(input, init).then(responseArrayBuffer);\n}\n","function responseText(response) {\n  if (!response.ok) throw new Error(response.status + \" \" + response.statusText);\n  return response.text();\n}\n\nexport default function(input, init) {\n  return fetch(input, init).then(responseText);\n}\n","import {csvParse, dsvFormat, tsvParse} from \"d3-dsv\";\nimport text from \"./text\";\n\nfunction dsvParse(parse) {\n  return function(input, init, row) {\n    if (arguments.length === 2 && typeof init === \"function\") row = init, init = undefined;\n    return text(input, init).then(function(response) {\n      return parse(response, row);\n    });\n  };\n}\n\nexport default function dsv(delimiter, input, init, row) {\n  if (arguments.length === 3 && typeof init === \"function\") row = init, init = undefined;\n  var format = dsvFormat(delimiter);\n  return text(input, init).then(function(response) {\n    return format.parse(response, row);\n  });\n}\n\nexport var csv = dsvParse(csvParse);\nexport var tsv = dsvParse(tsvParse);\n","import text from \"./text\";\n\nfunction parser(type) {\n  return function(input, init)  {\n    return text(input, init).then(function(text) {\n      return (new DOMParser).parseFromString(text, type);\n    });\n  };\n}\n\nexport default parser(\"application/xml\");\n\nexport var html = parser(\"text/html\");\n\nexport var svg = parser(\"image/svg+xml\");\n"],"sourceRoot":""}